"""File creation utilities for CLI setup wizard."""

from pathlib import Path
from typing import Dict, Any
from decimal import Decimal

import click
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Prompt


console = Console()


def _show_safety_warning() -> None:
    """Display trading safety warning panel."""
    console.print(
        Panel(
            "[bold red]SAFETY NOTICE[/bold red]\n\n"
            "[yellow]This system trades with REAL MONEY when simulation mode is disabled.[/yellow]\n"
            "For your safety, simulation mode is REQUIRED for new installations.\n"
            "Only disable simulation mode after thorough testing and validation.",
            title="Trading Safety",
            border_style="red",
        )
    )


def _get_env_settings() -> Dict[str, Any]:
    """Get environment settings from user prompts."""
    # Get Discord webhook URL
    webhook_url: str = click.prompt(
        "Discord webhook URL",
        type=str,
        default="https://discord.com/api/webhooks/YOUR_WEBHOOK_URL_HERE",
    )

    # Get IBKR settings
    ibkr_host: str = click.prompt("IBKR Host", default="127.0.0.1")
    ibkr_port: int = click.prompt("IBKR Port", default=7497, type=int)
    ibkr_client_id: int = click.prompt("IBKR Client ID", default=1, type=int)

    # Force simulation mode for safety
    console.print("\n[bold yellow]Simulation mode is ENABLED by default for safety.[/bold yellow]")
    simulation_mode: bool = True
    debug: bool = click.confirm("Enable debug logging?", default=False)

    return {
        "webhook_url": webhook_url,
        "ibkr_host": ibkr_host,
        "ibkr_port": ibkr_port,
        "ibkr_client_id": ibkr_client_id,
        "simulation_mode": simulation_mode,
        "debug": debug,
    }


def _generate_env_content(settings: Dict[str, Any]) -> str:
    """Generate .env file content from settings."""
    return f"""# Auto-Trader Environment Configuration
# Generated by setup wizard

# Interactive Brokers Configuration
IBKR_HOST={settings['ibkr_host']}
IBKR_PORT={settings['ibkr_port']}
IBKR_CLIENT_ID={settings['ibkr_client_id']}

# Discord Integration
DISCORD_WEBHOOK_URL={settings['webhook_url']}

# System Settings
SIMULATION_MODE={str(settings['simulation_mode']).lower()}
DEBUG={str(settings['debug']).lower()}

# File Paths (optional - defaults will be used if not set)
CONFIG_FILE=config.yaml
USER_CONFIG_FILE=user_config.yaml
LOGS_DIR=logs
"""


def create_env_file(path: Path) -> None:
    """Create .env file with interactive prompts."""
    console.print("\n[bold]Environment Configuration:[/bold]")
    _show_safety_warning()
    
    settings = _get_env_settings()
    env_content = _generate_env_content(settings)
    
    path.write_text(env_content)
    console.print(f"[green]✓ Created {path}[/green]")


def create_config_file(path: Path) -> None:
    """Create config.yaml with default values."""
    config_content = """# Auto-Trader System Configuration
# Generated by setup wizard

# Interactive Brokers Configuration
ibkr:
  host: "127.0.0.1"
  port: 7497
  client_id: 1
  timeout: 30

# Risk Management Configuration  
risk:
  max_position_percent: 10.0
  daily_loss_limit_percent: 2.0
  max_open_positions: 5
  min_account_balance: 1000

# Trading System Configuration
trading:
  simulation_mode: true
  market_hours_only: true
  default_timeframe: "15min"
  order_timeout: 60

# Logging Configuration
logging:
  level: "INFO"
  rotation: "1 day"
  retention: "30 days"
  format: "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level} | {name}:{function}:{line} | {message}"
"""

    path.write_text(config_content)
    console.print(f"[green]✓ Created {path}[/green]")


def create_user_config_file(path: Path) -> None:
    """Create user_config.yaml with interactive prompts."""
    console.print("\n[bold]User Preferences:[/bold]")

    # Get user preferences with proper type hints
    account_value: int = click.prompt("Default account value", default=10000, type=int)

    risk_category: str = click.prompt(
        "Risk category",
        type=click.Choice(["conservative", "moderate", "aggressive"]),
        default="conservative",
    )

    user_config_content = f"""# Auto-Trader User Preferences Configuration
# Generated by setup wizard

# Account Configuration
default_account_value: {account_value}

# Risk Profile
default_risk_category: "{risk_category}"

# Trading Preferences
preferred_timeframes:
  - "15min"
  - "1hour"

# Default Execution Functions by Trade Type
default_execution_functions:
  long: "close_above"
  short: "close_below"
"""

    path.write_text(user_config_content)
    console.print(f"[green]✓ Created {path}[/green]")


def get_plan_data_interactive() -> Dict[str, Any]:
    """Get plan data from user through interactive prompts."""
    from datetime import datetime
    
    console.print("\n[bold]Plan Information:[/bold]")
    
    # Get basic plan info
    symbol: str = Prompt.ask("Trading symbol (e.g., AAPL)", default="AAPL").upper()
    
    # Generate plan ID suggestion
    date_str: str = datetime.now().strftime("%Y%m%d")
    suggested_plan_id: str = f"{symbol}_{date_str}_001"
    
    plan_id: str = Prompt.ask("Plan ID", default=suggested_plan_id)
    
    # Get price levels as strings and convert directly to Decimal
    entry_level_str: str = click.prompt("Entry level", type=str)
    stop_loss_str: str = click.prompt("Stop loss", type=str)
    take_profit_str: str = click.prompt("Take profit", type=str)
    
    # Convert directly to Decimal without float intermediate
    entry_level: Decimal = Decimal(entry_level_str)
    stop_loss: Decimal = Decimal(stop_loss_str)
    take_profit: Decimal = Decimal(take_profit_str)
    
    # Get risk category
    risk_category: str = Prompt.ask(
        "Risk category",
        choices=["small", "normal", "large"],
        default="normal"
    )
    
    # Get execution function details
    console.print("\n[bold]Entry Function:[/bold]")
    threshold_str: str = click.prompt("Entry threshold", type=str, default=str(entry_level))
    threshold: Decimal = Decimal(threshold_str)
    
    return {
        "plan_id": plan_id,
        "symbol": symbol,
        "entry_level": entry_level,
        "stop_loss": stop_loss,
        "take_profit": take_profit,
        "risk_category": risk_category,
        "threshold": threshold,
    }


def export_performance_csv(period: str, current_date: str) -> None:
    """Export performance summary to CSV."""
    csv_filename = f"performance_summary_{period}_{current_date}.csv"
    console.print(f"[green]✓ Performance summary exported to {csv_filename}[/green]")
    console.print("[yellow]Note: This is a placeholder. Real implementation would create actual CSV file.[/yellow]")


def export_trade_history_csv(symbol: str | None, days: int) -> None:
    """Export trade history to CSV."""
    filter_suffix = f"_{symbol}" if symbol else ""
    csv_filename = f"trade_history_{days}days{filter_suffix}.csv"
    console.print(f"[green]✓ Trade history exported to {csv_filename}[/green]")
    console.print("[yellow]Note: This is a placeholder. Real implementation would create actual CSV file.[/yellow]")